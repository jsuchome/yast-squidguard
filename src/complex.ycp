/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/squidguard/complex.ycp
 * Package:	Configuration of squidguard
 * Summary:	Dialogs definitions
 * Authors:	Lars Vogdt <lars@linux-schulserver.de>
 *
 * $Id: complex.ycp 29363 2006-03-24 08:20:43Z mzugec $
 */

{

textdomain "squidguard";

import "CWM";
import "CWMTab";
import "Label";
import "Popup";
import "Wizard";
import "Confirm";
import "Squidguard";


include "squidguard/helps.ycp";
include "squidguard/dialogs.ycp";

/**
 * map with description of the tabs
 */
map tabs_description	= $[

    "blacklist"	: $[
	// tab header
	"header"	: _("&Blacklist "),
	// tab contents description: uses widget names from widget_descr map
	"contents"	: `VBox (
	    "blacklist_table",
	    `HBox (
		"add_button",
		"edit_button",
		"delete_button",
		`Right ("reset_button")
	    )
	),
	// widgets that are checked for events
	"widget_names"	: [
	    "blacklist_table",
	    "add_button",
	    "edit_button",
	    "delete_button",
	    "reset_button"
	],
    ],
    "whitelist"	: $[
	// tab header
	"header"	: _("&Whitelist"),
	// tab contents description: uses widget names from widget_descr map
	"contents"	: `VBox (
	    "whitelist_table",
	    `HBox (
		"add_button",
		"edit_button",
		"delete_button",
		`Right ("reset_button")
	    )
	),
	// widgets that are checked for events
	"widget_names"	: [
	    "whitelist_table",
	    "add_button",
	    "edit_button",
	    "delete_button",
	    "reset_button"
	],
    ],
];


/**
 * map with description of all widgets
 */
map <string, map> widget_descr = $[

    "blacklist_table" : $[
        "widget"		: `custom,
	"custom_widget"		: `VBox (
	    // label (above table)
	    `Left (`Label (_("Forbidden Addresses"))),
	    // table header
	    `Table (`id ("table"), `opt (`notify), `header(_("URL")))
	),
	"init"			: InitTable,
	"handle"		: HandleInitTable,
	"handle_events"		: [ "table" ],
	"help"          : _("<p>Here, configure the blacklist. Use <b>Add</b>, <b>Edit</b>, and <b>Delete</b> to modify the list of URLs.</p>
<p>Data is saved after pushing the <b>Finish</b> button.</p>
"),
    ],
    "whitelist_table" : $[
        "widget"		: `custom,
	"custom_widget"		: `VBox (
	    // label (above table)
	    `Left (`Label (_("Allowed Addresses"))),
	    // table header
	    `Table (`id ("table"), `opt (`notify), `header(_("URL")))
	),
	"init"			: InitTable,
	"handle"		: HandleInitTable,
	"handle_events"		: [ "table" ],
	"help"          : _("<p>Here, configure the whitelist. Use <b>Add</b>, <b>Edit</b>, and <b>Delete</b> to modify the list of URLs.</p>
<p>Data is saved after pushing the <b>Finish</b> button.</p>
"),
    ],
    "add_button"   : $[
	"widget"        : `push_button,
	"label"         : Label::AddButton (),
	"no_help"       : true,
	"handle"        : HandleAddButton,
	// only pushing the button is interesting event
	"handle_events"	: [ "add_button" ],
    ],
    "edit_button"   : $[
	"widget"        : `push_button,
	"label"         : Label::EditButton (),
	"no_help"       : true,
	"handle_events"	: [ "edit_button" ],
	"handle"        : HandleEditButton,
    ],
    "delete_button"   : $[
	"widget"        : `push_button,
	"label"         : Label::DeleteButton (),
	"no_help"       : true,
	"handle_events"	: [ "delete_button" ],
	"handle"        : HandleDeleteButton,
    ],
    "reset_button"   : $[
	"widget"        : `push_button,
	// push button label
	"label"         : _("R&eset"),
	"no_help"       : true,
	"handle_events"	: [ "reset_button" ],
//	"handle"        : HandleResetButton,
    ],
];


/**
 * Return a modification status
 * @return true if data was modified
 */
boolean Modified() {
    return Squidguard::Modified();
}

boolean PollAbort() {
    return UI::PollInput() == `abort;
}

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol ReadDialog() {
    Wizard::RestoreHelp(HELPS["read"]:"");
    // Squidguard::AbortFunction = PollAbort;
    if (!Confirm::MustBeRoot()) return `abort;
    boolean ret = Squidguard::Read();
    return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol WriteDialog() {
    Wizard::RestoreHelp(HELPS["write"]:"");
    // Squidguard::AbortFunction = PollAbort;
    boolean ret = Squidguard::Write();
    return ret ? `next : `abort;
}

/**
 * Summary dialog
 * @return dialog result
 */
any SummaryDialog() {

    // caption for the whole dialog
    string caption = _("Squidguard Configuration");

    widget_descr["tab"] = CWMTab::CreateWidget($[
        "tab_order"	: ["blacklist", "whitelist"],
	"tabs"		: tabs_description,
	"widget_descr"	: widget_descr,
	"initial_tab"	: "blacklist",
    ]);
    Wizard::SetContentsButtons ("", `VBox (), "", Label::BackButton(), Label::NextButton());

    // layout description of the main dialog
    term contents	= `VBox (
	`VSpacing (0.2),
	"tab",
	`VSpacing (0.2)
    );

    symbol ret = CWM::ShowAndRun ($[
	"widget_names"		: [ "tab" ],
	"widget_descr"		: widget_descr,
	"contents"		: contents,
	"caption"		: caption,
	"back_button"		: Label::BackButton (),
	"next_button"		: Label::FinishButton (),
    ]);
    y2milestone("Returning %1", ret);

    return ret;
}


/* EOF */
}
