/* ------------------------------------------------------------------------------
 * Copyright (c) 2006 Novell, Inc. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of version 2 of the GNU General Public License as published by the
 * Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, contact Novell, Inc.
 *
 * To contact Novell about this file by physical or electronic mail, you may find
 * current contact information at www.novell.com.
 * ------------------------------------------------------------------------------
 */

/**
 * File:	include/squidguard/dialogs.ycp
 * Package:	Configuration of squidguard
 * Summary:	Dialogs definitions
 * Authors:	Lars Vogdt <lars@linux-schulserver.de>
 *
 * $Id: dialogs.ycp 27914 2006-02-13 14:32:08Z locilka $
 */

{

textdomain "squidguard";

import "CWMTab";
import "Label";
import "Popup";
import "Squidguard";
import "URL";
import "Wizard";

include "squidguard/helps.ycp";


boolean ReallyAbort() {
    return !Squidguard::Modified() || Popup::ReallyAbort(true);
}

/**
 * initialize the table with blacklist
 */
define void InitTable (string id) {

    list items	= [];
    if (CWMTab::CurrentTab () == "whitelist")
	items = maplist (string url, (list<string>) Squidguard::whitelist,
	    ``(`item (`id (url), url)));
    else
	items = maplist (string url, (list<string>) Squidguard::blacklist,
	    ``(`item (`id (url), url)));
    UI::ChangeWidget (`id ("table"), `Items, items);
    UI::ChangeWidget (`id ("edit_button"), `Enabled, size (items) > 0);
    UI::ChangeWidget (`id ("delete_button"), `Enabled, size (items) > 0);
    if (size (items) > 0)
	UI::SetFocus (`id ("table"));
}

/**
 * Handle universal (=both for black and whitelist table) Delete button events
 */
define symbol HandleDeleteButton (string key, map event) {

    string current_item	= (string)UI::QueryWidget (`id ("table"), `CurrentItem);
    if (CWMTab::CurrentTab () == "whitelist")
    {
	Squidguard::whitelist	= (list<string>)
	    filter (string url, Squidguard::whitelist, ``(url != current_item));
    }
    else
    {
	Squidguard::blacklist	= (list<string>)
	    filter (string url, Squidguard::blacklist, ``(url != current_item));
    }
    InitTable ("table");

    return nil;
}

/**
 * Handle universal (=both for black and whitelist table) Edit button events
 */
define symbol HandleEditButton (string key, map event) {

    string current	= (string)UI::QueryWidget (`id ("table"), `CurrentItem);

    UI::OpenDialog (`opt(`decorated), `HBox (`HSpacing (0.5), `VBox (
	`VSpacing (0.5),
	// textentry label
	`TextEntry (`id (`url), _("&Modify URL"), current),
	`HBox (
	    `PushButton (`id(`ok),`opt(`key_F10, `default), Label::OKButton()),
	    `PushButton (`id(`cancel),`opt(`key_F9), Label::CancelButton())
	),
	`VSpacing (0.5)), `HSpacing (0.5))
    );
    UI::SetFocus (`id (`url));
    any ret	= nil;
    string url	= "";
    repeat
    {
	ret	= UI::UserInput ();
	if (ret == `ok)
	{
	    url		= (string) UI::QueryWidget (`id(`url), `Value);
	    if (url == "")
	    {
		ret	= `cancel;
		break;
	    }
	    // check if url is valid
	    if (!URL::Check (url))
	    {
		// popup message
		Popup::Error (_("The entered URL is not valid."));
		ret     = `notnext;
		continue;
	    }
	}
    } until (ret == `ok || ret == `cancel);
    UI::CloseDialog ();
    if (ret == `ok && url != current)
    {
	if (CWMTab::CurrentTab () == "blacklist")
	{
	    Squidguard::blacklist = (list<string>) union (
		filter (string u, Squidguard::blacklist, ``(u != current)),
		[ url ]);
	}
	else
	{
	    Squidguard::whitelist = (list<string>) union (
		filter (string u, Squidguard::whitelist, ``(u != current)),
		[ url ]);
	}
    }
    InitTable ("table");
    return nil;
}

// handle table events (double click = edit button)
define symbol HandleInitTable (string key, map event) {

    return HandleEditButton ("edit_button", $[]);
}

/**
 * Handle universal (=both for black and whitelist table) Add button events
 */
define symbol HandleAddButton (string key, map event) {

    // popup label
    string label	= _("&Add new blacklist URL");
    if (CWMTab::CurrentTab () == "whitelist")
	label	= _("&Add new whitelist URL");

    UI::OpenDialog (`opt(`decorated), `HBox (`HSpacing (0.5), `VBox (
	`VSpacing (0.5),
	`TextEntry (`id (`url), label),
	`HBox (
	    `PushButton (`id(`ok),`opt(`key_F10, `default), Label::OKButton()),
	    `PushButton (`id(`cancel),`opt(`key_F9), Label::CancelButton())
	),
	`VSpacing (0.5)), `HSpacing (0.5))
    );
    UI::SetFocus (`id (`url));
    any ret	= nil;
    string url	= "";
    repeat
    {
	ret	= UI::UserInput ();
	if (ret == `ok)
	{
	    url		= (string) UI::QueryWidget (`id(`url), `Value);
	    if (url == "")
	    {
		ret	= `cancel;
		break;
	    }
	    // check if url is valid
	    if (!URL::Check (url))
	    {
		// popup message
		Popup::Error (_("The entered URL is not valid."));
		ret     = `notnext;
		continue;
	    }
	}
    } until (ret == `ok || ret == `cancel);
    UI::CloseDialog ();
    if (ret == `ok)
    {
	if (CWMTab::CurrentTab () == "blacklist")
	{
	    // use union to filter out duplicates
	    Squidguard::blacklist =
		(list<string>) union (Squidguard::blacklist, [ url ]);
	}
	else
	{
	    Squidguard::whitelist =
		(list<string>) union (Squidguard::whitelist, [ url ]);
	}
    }
    InitTable ("table");
    return nil;
}


/**
 * Configure1 dialog
 * @return dialog result
 */
any Configure1Dialog () {

    /* Squidguard configure1 dialog caption */
    string caption = _("Squidguard Configuration");

    /* Squidguard configure1 dialog contents */
    term contents = `Label (_("First part of configuration of squidguard"));

    Wizard::SetContentsButtons(caption, contents, HELPS["c1"]:"",
	    Label::BackButton(), Label::NextButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
        else if(ret == `next || ret == `back) {
            break;
        }
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }

    return ret;
}


/* EOF */
}
